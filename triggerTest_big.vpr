domain Array  {
  
  function array_loc(a1: Array, i: Int): Ref 
  
  function alen(a1: Array): Int 
  
  function loc_inv_1(loc: Ref): Array 
  
  function loc_inv_2(loc: Ref): Int 
  
  axiom {
    (forall a1: Array, i: Int ::
      { array_loc(a1, i) }
      loc_inv_1(array_loc(a1, i)) == a1 && loc_inv_2(array_loc(a1, i)) == i)
  }
  
  axiom {
    (forall a1: Array :: { alen(a1) } alen(a1) >= 0)
  }
}

domain Option[T1]  {
  
  function none1(): Option[T1] 
  
  function some(x: T1): Option[T1] 
  
  function option_get(opt: Option[T1]): T1 
  
  axiom {
    (forall x: T1 ::
      { (some(x): Option[T1]) }
      (none1(): Option[T1]) != (some(x): Option[T1]))
  }
  
  axiom {
    (forall x: T1 ::
      { (some(x): Option[T1]) }
      (option_get((some(x): Option[T1])): T1) == x)
  }
  
  axiom {
    (forall opt: Option[T1] ::
      { (some((option_get(opt): T1)): Option[T1]) }
      (some((option_get(opt): T1)): Option[T1]) == opt)
  }
}

field a: Option[Array]

field f: Option[Array]

field c: Option[Array]

field b: Option[Array]

field int: Int

field d: Option[Array]

field e: Option[Array]

field g: Option[Array]

function aloc(a1: Array, i: Int): Ref
  requires 0 <= i
  requires i < alen(a1)
  decreases 
  ensures loc_inv_1(result) == a1
  ensures loc_inv_2(result) == i
{
  array_loc(a1, i)
}


function optGet1(opt: Option[Array]): Array
  requires opt != (none1(): Option[Array])
  decreases 
  ensures (some(result): Option[Array]) == opt
{
  (option_get(opt): Array)
}

function type1(type2: Ref): Int
  decreases 
  ensures result >= 0
  ensures result <= 1
  ensures type2 == null ==> result == 0
  ensures type2 != null ==> result != 0


function subtype1(subtype2: Int, subtype3: Int): Bool
  requires subtype2 >= 0
  requires subtype2 <= 1
  requires subtype3 >= 0
  requires subtype3 <= 1
  decreases 
{
  (subtype2 == 0 ==> true) && (subtype2 == 1 ==> subtype3 == 1)
}

method make_array1(tid: Int, dim0: Int) returns (res: Option[Array])
  requires 0 <= dim0
  ensures res != (none1(): Option[Array])
  ensures alen(optGet1(res)) == dim0
  ensures (forall preferred_list_i0__: Int ::
      { aloc(optGet1(res), preferred_list_i0__) }
      0 <= preferred_list_i0__ && preferred_list_i0__ < dim0 ==>
      acc(aloc(optGet1(res), preferred_list_i0__).int, write))
  ensures (forall preferred_list_i0__: Int ::
      { aloc(optGet1(res), preferred_list_i0__) }
      0 <= preferred_list_i0__ && preferred_list_i0__ < dim0 ==>
      aloc(optGet1(res), preferred_list_i0__).int == 0)


method constructorc1(tid: Int) returns (res: Ref)
  ensures acc(res.a, write)
  ensures res.a != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(res.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(res.a)) ==>
      acc(aloc(optGet1(res.a), preferred_list_i__).int, write))
  ensures acc(res.b, write)
  ensures res.b != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(res.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(res.b)) ==>
      acc(aloc(optGet1(res.b), preferred_list_i__).int, write))
  ensures acc(res.c, write)
  ensures res.c != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(res.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(res.c)) ==>
      acc(aloc(optGet1(res.c), preferred_list_i__).int, write))
  ensures acc(res.d, write)
  ensures res.d != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(res.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(res.d)) ==>
      acc(aloc(optGet1(res.d), preferred_list_i__).int, write))
  ensures acc(res.e, write)
  ensures res.e != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(res.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(res.e)) ==>
      acc(aloc(optGet1(res.e), preferred_list_i__).int, write))
  ensures acc(res.f, write)
  ensures res.f != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(res.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(res.f)) ==>
      acc(aloc(optGet1(res.f), preferred_list_i__).int, write))
  ensures acc(res.g, write)
  ensures res.g != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(res.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(res.g)) ==>
      acc(aloc(optGet1(res.g), preferred_list_i__).int, write))
  ensures res != null
  ensures type1(res) == 1
{
  {
    var exc: Ref
    var return: Ref
    var unknown: Ref
    var flatten: Ref
    var res1: Option[Array]
    var flatten1: Option[Array]
    var res2: Option[Array]
    var flatten2: Option[Array]
    var res3: Option[Array]
    var flatten3: Option[Array]
    var res4: Option[Array]
    var flatten4: Option[Array]
    var res5: Option[Array]
    var flatten5: Option[Array]
    var res6: Option[Array]
    var flatten6: Option[Array]
    var res7: Option[Array]
    var flatten7: Option[Array]
    exc := null
    flatten := new(a, b, c, d, e, f, g)
    inhale type1(flatten) == 1
    unknown := flatten
    res1 := make_array1(tid, 0)
    flatten1 := res1
    unknown.a := flatten1
    res2 := make_array1(tid, 0)
    flatten2 := res2
    unknown.b := flatten2
    res3 := make_array1(tid, 0)
    flatten3 := res3
    unknown.c := flatten3
    res4 := make_array1(tid, 0)
    flatten4 := res4
    unknown.d := flatten4
    res5 := make_array1(tid, 0)
    flatten5 := res5
    unknown.e := flatten5
    res6 := make_array1(tid, 0)
    flatten6 := res6
    unknown.f := flatten6
    res7 := make_array1(tid, 0)
    flatten7 := res7
    unknown.g := flatten7
    return := unknown
    goto END
    label END
    res := return
    label BUBBLE
    assert exc == null
  }
}

method init1(this: Ref, tid: Int) returns (res: Int)
  requires this != null
  requires acc(this.a, write)
  requires this.a != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.a)) ==>
      acc(aloc(optGet1(this.a), preferred_list_i__).int, write))
  requires acc(this.b, write)
  requires this.b != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.b)) ==>
      acc(aloc(optGet1(this.b), preferred_list_i__).int, write))
  requires acc(this.c, write)
  requires this.c != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.c)) ==>
      acc(aloc(optGet1(this.c), preferred_list_i__).int, write))
  requires acc(this.d, write)
  requires this.d != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.d)) ==>
      acc(aloc(optGet1(this.d), preferred_list_i__).int, write))
  requires acc(this.e, write)
  requires this.e != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.e)) ==>
      acc(aloc(optGet1(this.e), preferred_list_i__).int, write))
  requires acc(this.f, write)
  requires this.f != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.f)) ==>
      acc(aloc(optGet1(this.f), preferred_list_i__).int, write))
  requires acc(this.g, write)
  requires this.g != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.g)) ==>
      acc(aloc(optGet1(this.g), preferred_list_i__).int, write))
  ensures acc(this.a, write)
  ensures this.a != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.a)) ==>
      acc(aloc(optGet1(this.a), preferred_list_i__).int, write))
  ensures acc(this.b, write)
  ensures this.b != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.b)) ==>
      acc(aloc(optGet1(this.b), preferred_list_i__).int, write))
  ensures acc(this.c, write)
  ensures this.c != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.c)) ==>
      acc(aloc(optGet1(this.c), preferred_list_i__).int, write))
  ensures acc(this.d, write)
  ensures this.d != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.d)) ==>
      acc(aloc(optGet1(this.d), preferred_list_i__).int, write))
  ensures acc(this.e, write)
  ensures this.e != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.e)) ==>
      acc(aloc(optGet1(this.e), preferred_list_i__).int, write))
  ensures acc(this.f, write)
  ensures this.f != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.f)) ==>
      acc(aloc(optGet1(this.f), preferred_list_i__).int, write))
  ensures acc(this.g, write)
  ensures this.g != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(this.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(this.g)) ==>
      acc(aloc(optGet1(this.g), preferred_list_i__).int, write))


method bar1(tid: Int, c1: Ref) returns (res: Int)
  requires acc(c1.a, write)
  requires c1.a != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.a)) ==>
      acc(aloc(optGet1(c1.a), preferred_list_i__).int, write))
  requires acc(c1.b, write)
  requires c1.b != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.b)) ==>
      acc(aloc(optGet1(c1.b), preferred_list_i__).int, write))
  requires acc(c1.c, write)
  requires c1.c != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.c)) ==>
      acc(aloc(optGet1(c1.c), preferred_list_i__).int, write))
  requires acc(c1.d, write)
  requires c1.d != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.d)) ==>
      acc(aloc(optGet1(c1.d), preferred_list_i__).int, write))
  requires acc(c1.e, write)
  requires c1.e != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.e)) ==>
      acc(aloc(optGet1(c1.e), preferred_list_i__).int, write))
  requires acc(c1.f, write)
  requires c1.f != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.f)) ==>
      acc(aloc(optGet1(c1.f), preferred_list_i__).int, write))
  requires acc(c1.g, write)
  requires c1.g != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.g)) ==>
      acc(aloc(optGet1(c1.g), preferred_list_i__).int, write))
  ensures acc(c1.a, write)
  ensures c1.a != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.a)) ==>
      acc(aloc(optGet1(c1.a), preferred_list_i__).int, write))
  ensures acc(c1.b, write)
  ensures c1.b != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.b)) ==>
      acc(aloc(optGet1(c1.b), preferred_list_i__).int, write))
  ensures acc(c1.c, write)
  ensures c1.c != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.c)) ==>
      acc(aloc(optGet1(c1.c), preferred_list_i__).int, write))
  ensures acc(c1.d, write)
  ensures c1.d != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.d)) ==>
      acc(aloc(optGet1(c1.d), preferred_list_i__).int, write))
  ensures acc(c1.e, write)
  ensures c1.e != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.e)) ==>
      acc(aloc(optGet1(c1.e), preferred_list_i__).int, write))
  ensures acc(c1.f, write)
  ensures c1.f != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.f)) ==>
      acc(aloc(optGet1(c1.f), preferred_list_i__).int, write))
  ensures acc(c1.g, write)
  ensures c1.g != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.g)) ==>
      acc(aloc(optGet1(c1.g), preferred_list_i__).int, write))



method baz1(tid: Int, c1: Ref) returns (res: Int)
  requires acc(c1.a, write)
  requires c1.a != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.a)) ==>
      acc(aloc(optGet1(c1.a), preferred_list_i__).int, write))
  requires acc(c1.b, write)
  requires c1.b != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.b)) ==>
      acc(aloc(optGet1(c1.b), preferred_list_i__).int, write))
  requires acc(c1.c, write)
  requires c1.c != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.c)) ==>
      acc(aloc(optGet1(c1.c), preferred_list_i__).int, write))
  requires acc(c1.d, write)
  requires c1.d != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.d)) ==>
      acc(aloc(optGet1(c1.d), preferred_list_i__).int, write))
  requires acc(c1.e, write)
  requires c1.e != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.e)) ==>
      acc(aloc(optGet1(c1.e), preferred_list_i__).int, write))
  requires acc(c1.f, write)
  requires c1.f != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.f)) ==>
      acc(aloc(optGet1(c1.f), preferred_list_i__).int, write))
  requires acc(c1.g, write)
  requires c1.g != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.g)) ==>
      acc(aloc(optGet1(c1.g), preferred_list_i__).int, write))
  ensures acc(c1.a, write)
  ensures c1.a != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.a)) ==>
      acc(aloc(optGet1(c1.a), preferred_list_i__).int, write))
  ensures acc(c1.b, write)
  ensures c1.b != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.b)) ==>
      acc(aloc(optGet1(c1.b), preferred_list_i__).int, write))
  ensures acc(c1.c, write)
  ensures c1.c != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.c)) ==>
      acc(aloc(optGet1(c1.c), preferred_list_i__).int, write))
  ensures acc(c1.d, write)
  ensures c1.d != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.d)) ==>
      acc(aloc(optGet1(c1.d), preferred_list_i__).int, write))
  ensures acc(c1.e, write)
  ensures c1.e != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.e)) ==>
      acc(aloc(optGet1(c1.e), preferred_list_i__).int, write))
  ensures acc(c1.f, write)
  ensures c1.f != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.f)) ==>
      acc(aloc(optGet1(c1.f), preferred_list_i__).int, write))
  ensures acc(c1.g, write)
  ensures c1.g != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.g)) ==>
      acc(aloc(optGet1(c1.g), preferred_list_i__).int, write))

method qux1(tid: Int, c1: Ref) returns (res: Int)
  requires acc(c1.a, write)
  requires c1.a != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.a)) ==>
      acc(aloc(optGet1(c1.a), preferred_list_i__).int, write))
  requires acc(c1.b, write)
  requires c1.b != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.b)) ==>
      acc(aloc(optGet1(c1.b), preferred_list_i__).int, write))
  requires acc(c1.c, write)
  requires c1.c != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.c)) ==>
      acc(aloc(optGet1(c1.c), preferred_list_i__).int, write))
  requires acc(c1.d, write)
  requires c1.d != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.d)) ==>
      acc(aloc(optGet1(c1.d), preferred_list_i__).int, write))
  requires acc(c1.e, write)
  requires c1.e != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.e)) ==>
      acc(aloc(optGet1(c1.e), preferred_list_i__).int, write))
  requires acc(c1.f, write)
  requires c1.f != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.f)) ==>
      acc(aloc(optGet1(c1.f), preferred_list_i__).int, write))
  requires acc(c1.g, write)
  requires c1.g != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.g)) ==>
      acc(aloc(optGet1(c1.g), preferred_list_i__).int, write))
  ensures acc(c1.a, write)
  ensures c1.a != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.a)) ==>
      acc(aloc(optGet1(c1.a), preferred_list_i__).int, write))
  ensures acc(c1.b, write)
  ensures c1.b != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.b)) ==>
      acc(aloc(optGet1(c1.b), preferred_list_i__).int, write))
  ensures acc(c1.c, write)
  ensures c1.c != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.c)) ==>
      acc(aloc(optGet1(c1.c), preferred_list_i__).int, write))
  ensures acc(c1.d, write)
  ensures c1.d != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.d)) ==>
      acc(aloc(optGet1(c1.d), preferred_list_i__).int, write))
  ensures acc(c1.e, write)
  ensures c1.e != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.e)) ==>
      acc(aloc(optGet1(c1.e), preferred_list_i__).int, write))
  ensures acc(c1.f, write)
  ensures c1.f != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.f)) ==>
      acc(aloc(optGet1(c1.f), preferred_list_i__).int, write))
  ensures acc(c1.g, write)
  ensures c1.g != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.g)) ==>
      acc(aloc(optGet1(c1.g), preferred_list_i__).int, write))

method foo1(tid: Int, c1: Ref, d1: Ref, e1: Ref) returns (res: Int)
  requires acc(c1.a, write)
  requires c1.a != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.a)) ==>
      acc(aloc(optGet1(c1.a), preferred_list_i__).int, write))
  requires acc(c1.b, write)
  requires c1.b != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.b)) ==>
      acc(aloc(optGet1(c1.b), preferred_list_i__).int, write))
  requires acc(c1.c, write)
  requires c1.c != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.c)) ==>
      acc(aloc(optGet1(c1.c), preferred_list_i__).int, write))
  requires acc(c1.d, write)
  requires c1.d != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.d)) ==>
      acc(aloc(optGet1(c1.d), preferred_list_i__).int, write))
  requires acc(c1.e, write)
  requires c1.e != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.e)) ==>
      acc(aloc(optGet1(c1.e), preferred_list_i__).int, write))
  requires acc(c1.f, write)
  requires c1.f != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.f)) ==>
      acc(aloc(optGet1(c1.f), preferred_list_i__).int, write))
  requires acc(c1.g, write)
  requires c1.g != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.g)) ==>
      acc(aloc(optGet1(c1.g), preferred_list_i__).int, write))
  requires acc(d1.a, write)
  requires d1.a != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.a)) ==>
      acc(aloc(optGet1(d1.a), preferred_list_i__).int, write))
  requires acc(d1.b, write)
  requires d1.b != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.b)) ==>
      acc(aloc(optGet1(d1.b), preferred_list_i__).int, write))
  requires acc(d1.c, write)
  requires d1.c != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.c)) ==>
      acc(aloc(optGet1(d1.c), preferred_list_i__).int, write))
  requires acc(d1.d, write)
  requires d1.d != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.d)) ==>
      acc(aloc(optGet1(d1.d), preferred_list_i__).int, write))
  requires acc(d1.e, write)
  requires d1.e != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.e)) ==>
      acc(aloc(optGet1(d1.e), preferred_list_i__).int, write))
  requires acc(d1.f, write)
  requires d1.f != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.f)) ==>
      acc(aloc(optGet1(d1.f), preferred_list_i__).int, write))
  requires acc(d1.g, write)
  requires d1.g != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.g)) ==>
      acc(aloc(optGet1(d1.g), preferred_list_i__).int, write))
  requires acc(e1.a, write)
  requires e1.a != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.a)) ==>
      acc(aloc(optGet1(e1.a), preferred_list_i__).int, write))
  requires acc(e1.b, write)
  requires e1.b != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.b)) ==>
      acc(aloc(optGet1(e1.b), preferred_list_i__).int, write))
  requires acc(e1.c, write)
  requires e1.c != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.c)) ==>
      acc(aloc(optGet1(e1.c), preferred_list_i__).int, write))
  requires acc(e1.d, write)
  requires e1.d != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.d)) ==>
      acc(aloc(optGet1(e1.d), preferred_list_i__).int, write))
  requires acc(e1.e, write)
  requires e1.e != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.e)) ==>
      acc(aloc(optGet1(e1.e), preferred_list_i__).int, write))
  requires acc(e1.f, write)
  requires e1.f != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.f)) ==>
      acc(aloc(optGet1(e1.f), preferred_list_i__).int, write))
  requires acc(e1.g, write)
  requires e1.g != (none1(): Option[Array])
  requires (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.g)) ==>
      acc(aloc(optGet1(e1.g), preferred_list_i__).int, write))
  ensures acc(c1.a, write)
  ensures c1.a != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.a)) ==>
      acc(aloc(optGet1(c1.a), preferred_list_i__).int, write))
  ensures acc(c1.b, write)
  ensures c1.b != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.b)) ==>
      acc(aloc(optGet1(c1.b), preferred_list_i__).int, write))
  ensures acc(c1.c, write)
  ensures c1.c != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.c)) ==>
      acc(aloc(optGet1(c1.c), preferred_list_i__).int, write))
  ensures acc(c1.d, write)
  ensures c1.d != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.d)) ==>
      acc(aloc(optGet1(c1.d), preferred_list_i__).int, write))
  ensures acc(c1.e, write)
  ensures c1.e != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.e)) ==>
      acc(aloc(optGet1(c1.e), preferred_list_i__).int, write))
  ensures acc(c1.f, write)
  ensures c1.f != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.f)) ==>
      acc(aloc(optGet1(c1.f), preferred_list_i__).int, write))
  ensures acc(c1.g, write)
  ensures c1.g != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(c1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(c1.g)) ==>
      acc(aloc(optGet1(c1.g), preferred_list_i__).int, write))
  ensures acc(d1.a, write)
  ensures d1.a != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.a)) ==>
      acc(aloc(optGet1(d1.a), preferred_list_i__).int, write))
  ensures acc(d1.b, write)
  ensures d1.b != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.b)) ==>
      acc(aloc(optGet1(d1.b), preferred_list_i__).int, write))
  ensures acc(d1.c, write)
  ensures d1.c != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.c)) ==>
      acc(aloc(optGet1(d1.c), preferred_list_i__).int, write))
  ensures acc(d1.d, write)
  ensures d1.d != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.d)) ==>
      acc(aloc(optGet1(d1.d), preferred_list_i__).int, write))
  ensures acc(d1.e, write)
  ensures d1.e != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.e)) ==>
      acc(aloc(optGet1(d1.e), preferred_list_i__).int, write))
  ensures acc(d1.f, write)
  ensures d1.f != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.f)) ==>
      acc(aloc(optGet1(d1.f), preferred_list_i__).int, write))
  ensures acc(d1.g, write)
  ensures d1.g != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(d1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(d1.g)) ==>
      acc(aloc(optGet1(d1.g), preferred_list_i__).int, write))
  ensures acc(e1.a, write)
  ensures e1.a != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.a), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.a)) ==>
      acc(aloc(optGet1(e1.a), preferred_list_i__).int, write))
  ensures acc(e1.b, write)
  ensures e1.b != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.b), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.b)) ==>
      acc(aloc(optGet1(e1.b), preferred_list_i__).int, write))
  ensures acc(e1.c, write)
  ensures e1.c != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.c), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.c)) ==>
      acc(aloc(optGet1(e1.c), preferred_list_i__).int, write))
  ensures acc(e1.d, write)
  ensures e1.d != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.d), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.d)) ==>
      acc(aloc(optGet1(e1.d), preferred_list_i__).int, write))
  ensures acc(e1.e, write)
  ensures e1.e != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.e), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.e)) ==>
      acc(aloc(optGet1(e1.e), preferred_list_i__).int, write))
  ensures acc(e1.f, write)
  ensures e1.f != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.f), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.f)) ==>
      acc(aloc(optGet1(e1.f), preferred_list_i__).int, write))
  ensures acc(e1.g, write)
  ensures e1.g != (none1(): Option[Array])
  ensures (forall preferred_list_i__: Int ::
      { aloc(optGet1(e1.g), preferred_list_i__) }
      0 <= preferred_list_i__ && preferred_list_i__ < alen(optGet1(e1.g)) ==>
      acc(aloc(optGet1(e1.g), preferred_list_i__).int, write))
{
  {
    var exc: Ref
    var return: Int
    var res1: Int
    var res2: Int
    var res3: Int
    var res4: Int
    var res5: Int
    var res6: Int
    var res7: Int
    var res8: Int
    var res9: Int
    var res10: Int
    var res11: Int
    var res12: Int
    var res13: Int
    var res14: Int
    var res15: Int
    var res16: Int
    var res17: Int
    var res18: Int
    exc := null
    res1 := init1(c1, tid)
    res2 := init1(d1, tid)
    res3 := init1(e1, tid)
    res4 := bar1(tid, c1)
    res5 := baz1(tid, d1)
    res6 := qux1(tid, e1)
    res7 := init1(c1, tid)
    res8 := init1(d1, tid)
    res9 := init1(e1, tid)
    res10 := bar1(tid, d1)
    res11 := baz1(tid, e1)
    res12 := qux1(tid, c1)
    res13 := init1(c1, tid)
    res14 := init1(d1, tid)
    res15 := init1(e1, tid)
    res16 := bar1(tid, e1)
    res17 := baz1(tid, c1)
    res18 := qux1(tid, d1)
    label END
    res := return
    label BUBBLE
    assert exc == null
  }
}
