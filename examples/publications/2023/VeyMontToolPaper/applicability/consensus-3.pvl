class Process {
  int n, f, fault;
  int v, v1, v2, v3, tiebreaker;

  inline resource class_invariant() =
    (fault == 0 || fault == 1) &&
    (v == 0 || v == 1) &&
    (v1 == 0 || v1 == 1) &&
    (v2 == 0 || v2 == 1) &&
    (v3 == 0 || v3 == 1) &&
    (tiebreaker == 0 || tiebreaker == 1);

  inline resource constants() =
    \old(n) == n &&
    \old(f) == f &&
    \old(fault) == fault;

  requires v == 0 || v == 1;
  requires fault == 0 || fault == 1;
  ensures this.n == n;
  ensures this.f == f;
  ensures this.fault == fault;
  ensures this.v == v;
  ensures class_invariant();
  Process(int n, int f, int fault, int v) {
    this.n = n;
    this.f = f;
    this.fault = fault;
    this.v = v;
    this.v1 = 0;
    this.v2 = 0;
    this.v3 = 0;
    this.tiebreaker = 0;
  }

  requires class_invariant();
  ensures \result == n - (v1 + v2 + v3);
  pure int zeros() {
    return n - ones();
  }

  requires class_invariant();
  ensures \result == v1 + v2 + v3;
  pure int ones() {
    return v1 + v2 + v3;
  }

  requires class_invariant();
  ensures (zeros() >= ones() ==> \result == 0);
  ensures (zeros() < ones() ==> \result == 1);
  pure int majority() {
    return zeros() < ones() ? 1 : 0;
  }

  requires class_invariant();
  ensures zeros() >= ones() ==> \result == zeros();
  ensures zeros() <  ones() ==> \result == ones();
  pure int mult() {
    return zeros() < ones() ? ones() : zeros();
  }

  context class_invariant();
  ensures constants();
  ensures \old(v) == v;
  ensures \old(v1) == v1;
  ensures \old(v2) == v2;
  ensures \old(v3) == v3;
  ensures \old(tiebreaker) == tiebreaker;
  ensures fault == 0 ==> \result == v;
  ensures fault == 1 ==> \result == 0 || \result == 1;
  int getValueOrFail();

  context class_invariant();
  ensures constants();
  ensures \old(v) == v;
  ensures \old(v1) == v1;
  ensures \old(v2) == v2;
  ensures \old(v3) == v3;
  ensures \old(tiebreaker) == tiebreaker;
  ensures fault == 0 ==> \result == majority();
  ensures fault == 1 ==> \result == 0 || \result == 1;
  int getMajorityOrFail();

  context class_invariant();
  ensures constants();
  ensures \old(v1) == v1;
  ensures \old(v2) == v2;
  ensures \old(v3) == v3;
  ensures \old(tiebreaker) == tiebreaker;
  ensures fault == 0 && mult() >= (n + 1) / 2 + f ==> v == majority();
  ensures fault == 0 && mult() <  (n + 1) / 2 + f ==> v == tiebreaker;
  ensures fault == 1 ==> v == 0 || v == 1;
  void setValueOrFail();
}

class SeqProgram {
  Process p1, p2, p3;

  inline resource consistency() =
    p1.n == p2.n && p2.n == p3.n && p3.n == p1.n &&
    p1.f == p2.f && p2.f == p3.f && p3.f == p1.f;

  requires n == 3;
//*
  requires f == 0;
/*/
  requires f == 1;
//*/
  requires fault1 == 0 || fault1 == 1;
  requires fault2 == 0 || fault2 == 1;
  requires fault3 == 0 || fault3 == 1;
  requires v1 == 0 || v1 == 1;
  requires v2 == 0 || v2 == 1;
  requires v3 == 0 || v3 == 1;
  requires fault1 + fault2 + fault3 <= f;
  ensures p1.class_invariant();
  ensures p2.class_invariant();
  ensures p3.class_invariant();
  ensures consistency();
//*
  ensures p1.fault + p2.fault + p3.fault <= p1.f && p1.f == 0 && p1.n == 3;
/*/
  ensures p1.fault + p2.fault + p3.fault <= p1.f && p1.f == 1 && p1.n == 3;
//*/
  SeqProgram(int n, int f,
             int fault1, int v1,
             int fault2, int v2,
             int fault3, int v3) {
    p1 = new Process(n, f, fault1, v1);
    p2 = new Process(n, f, fault2, v2);
    p3 = new Process(n, f, fault3, v3);
  }

  requires p1.class_invariant();
  requires p2.class_invariant();
  requires p3.class_invariant();
  requires consistency();
//*
  requires p1.fault + p2.fault + p3.fault <= p1.f && p1.f == 0 && p1.n == 3;
/*/
  requires p1.fault + p2.fault + p3.fault <= p1.f && p1.f == 1 && p1.n == 3;
//*/
  ensures ((p1.fault == 0 ==> p1.v == 0) &&
           (p2.fault == 0 ==> p2.v == 0) &&
           (p3.fault == 0 ==> p3.v == 0)) ||
          ((p1.fault == 0 ==> p1.v == 1) &&
           (p2.fault == 0 ==> p2.v == 1) &&
           (p3.fault == 0 ==> p3.v == 1));
  void run() {
    p1.v1 = p1.getValueOrFail(); p2.v1 = p1.getValueOrFail(); p3.v1 = p1.getValueOrFail();
    p1.v2 = p2.getValueOrFail(); p2.v2 = p2.getValueOrFail(); p3.v2 = p2.getValueOrFail();
    p1.v3 = p3.getValueOrFail(); p2.v3 = p3.getValueOrFail(); p3.v3 = p3.getValueOrFail();
    p1.tiebreaker = p1.getMajorityOrFail();
    p2.tiebreaker = p1.getMajorityOrFail();
    p3.tiebreaker = p1.getMajorityOrFail();
    p1.setValueOrFail();
    p2.setValueOrFail();
    p3.setValueOrFail();
  }
}