class Query {
  int serialNumber;

  Query(int serialNumber) {
    this.serialNumber = serialNumber;
  }

  Query clone();
}

class Client {
  Query query;
  boolean flag, flag1, flag2, flag3, flag4, flag5, flag6, flag7, flag8, flag9, flag10, flag11, flag12, flag13, flag14, flag15, flag16;

  ensures query != null;
  ensures flag == false;
  Client(int n) {
    query = new Query(5);
    flag = false;
  }

  ensures \old(query) == query;
  ensures   flag1 && flag2 && flag3 && flag4 && flag5 && flag6 && flag7 && flag8 && flag9 && flag10 && flag11 && flag12 && flag13 && flag14 && flag15 && flag16  ==>  flag;
  ensures !(flag1 && flag2 && flag3 && flag4 && flag5 && flag6 && flag7 && flag8 && flag9 && flag10 && flag11 && flag12 && flag13 && flag14 && flag15 && flag16) ==> !flag;
  void checkFlags() {
    flag = flag1 && flag2 && flag3 && flag4 && flag5 && flag6 && flag7 && flag8 && flag9 && flag10 && flag11 && flag12 && flag13 && flag14 && flag15 && flag16;
  }
}

class Server {
  int status;
  boolean flag;
  Query query;

  pure int INITIAL() = 0;
  pure int STARTED() = 1;
  pure int COMMITTED() = 2;
  pure int ABORTED() = 3;

  ensures status == INITIAL();
  Server(int n) {
    status = 0;
    flag = false;
    query = new Query(-1); // dummy
  }

  requires status == INITIAL() || status == ABORTED();
  ensures status == STARTED();
  void start() {
    status = 1;
  }

  requires status == STARTED();
  ensures status == COMMITTED();
  void commit() {
    status = 2;
  }

  requires status == STARTED();
  ensures status == ABORTED();
  void abort() {
    status = 3;
  }

  ensures \result == (status != COMMITTED());
  pure boolean isUncommitted() {
    return status != 2;
  }
}

class SeqProgram {
  Client c;
  Server s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

  inline resource consistency() =
    (!c.flag ==> s1.isUncommitted()) &&
    (!c.flag ==> s2.isUncommitted()) &&
    (!c.flag ==> s3.isUncommitted()) &&
    (!c.flag ==> s4.isUncommitted()) &&
    (!c.flag ==> s5.isUncommitted()) &&
    (!c.flag ==> s6.isUncommitted()) &&
    (!c.flag ==> s7.isUncommitted()) &&
    (!c.flag ==> s8.isUncommitted()) &&
    (!c.flag ==> s9.isUncommitted()) &&
    (!c.flag ==> s10.isUncommitted()) &&
    (!c.flag ==> s11.isUncommitted()) &&
    (!c.flag ==> s12.isUncommitted()) &&
    (!c.flag ==> s13.isUncommitted()) &&
    (!c.flag ==> s14.isUncommitted()) &&
    (!c.flag ==> s15.isUncommitted()) &&
    (!c.flag ==> s16.isUncommitted());

  ensures c.query != null;
  ensures c.flag == false;
  ensures s1.status == s1.INITIAL();
  ensures s2.status == s2.INITIAL();
  ensures s3.status == s3.INITIAL();
  ensures s4.status == s4.INITIAL();
  ensures s5.status == s5.INITIAL();
  ensures s6.status == s6.INITIAL();
  ensures s7.status == s7.INITIAL();
  ensures s8.status == s8.INITIAL();
  ensures s9.status == s9.INITIAL();
  ensures s10.status == s10.INITIAL();
  ensures s11.status == s11.INITIAL();
  ensures s12.status == s12.INITIAL();
  ensures s13.status == s13.INITIAL();
  ensures s14.status == s14.INITIAL();
  ensures s15.status == s15.INITIAL();
  ensures s16.status == s16.INITIAL();
  ensures consistency();
  SeqProgram(int n){
    c = new Client(n);
    s1 = new Server(n);
    s2 = new Server(n);
    s3 = new Server(n);
    s4 = new Server(n);
    s5 = new Server(n);
    s6 = new Server(n);
    s7 = new Server(n);
    s8 = new Server(n);
    s9 = new Server(n);
    s10 = new Server(n);
    s11 = new Server(n);
    s12 = new Server(n);
    s13 = new Server(n);
    s14 = new Server(n);
    s15 = new Server(n);
    s16 = new Server(n);
  }

  requires c.query != null;
  requires c.flag == false;
  requires s1.status == s1.INITIAL();
  requires s2.status == s2.INITIAL();
  requires s3.status == s3.INITIAL();
  requires s4.status == s4.INITIAL();
  requires s5.status == s5.INITIAL();
  requires s6.status == s6.INITIAL();
  requires s7.status == s7.INITIAL();
  requires s8.status == s8.INITIAL();
  requires s9.status == s9.INITIAL();
  requires s10.status == s10.INITIAL();
  requires s11.status == s11.INITIAL();
  requires s12.status == s12.INITIAL();
  requires s13.status == s13.INITIAL();
  requires s14.status == s14.INITIAL();
  requires s15.status == s15.INITIAL();
  requires s16.status == s16.INITIAL();
  requires consistency();
  ensures s1.status == s1.COMMITTED();
  ensures s2.status == s2.COMMITTED();
  ensures s3.status == s3.COMMITTED();
  ensures s4.status == s4.COMMITTED();
  ensures s5.status == s5.COMMITTED();
  ensures s6.status == s6.COMMITTED();
  ensures s7.status == s7.COMMITTED();
  ensures s8.status == s8.COMMITTED();
  ensures s9.status == s9.COMMITTED();
  ensures s10.status == s10.COMMITTED();
  ensures s11.status == s11.COMMITTED();
  ensures s12.status == s12.COMMITTED();
  ensures s13.status == s13.COMMITTED();
  ensures s14.status == s14.COMMITTED();
  ensures s15.status == s15.COMMITTED();
  ensures s16.status == s16.COMMITTED();
  void run() {
    loop_invariant c.query != null;
    loop_invariant s1.status == s1.INITIAL() || s1.status == s1.COMMITTED() || s1.status == s1.ABORTED();
    loop_invariant s2.status == s2.INITIAL() || s2.status == s2.COMMITTED() || s2.status == s2.ABORTED();
    loop_invariant s3.status == s3.INITIAL() || s3.status == s3.COMMITTED() || s3.status == s3.ABORTED();
    loop_invariant s4.status == s4.INITIAL() || s4.status == s4.COMMITTED() || s4.status == s4.ABORTED();
    loop_invariant s5.status == s5.INITIAL() || s5.status == s5.COMMITTED() || s5.status == s5.ABORTED();
    loop_invariant s6.status == s6.INITIAL() || s6.status == s6.COMMITTED() || s6.status == s6.ABORTED();
    loop_invariant s7.status == s7.INITIAL() || s7.status == s7.COMMITTED() || s7.status == s7.ABORTED();
    loop_invariant s8.status == s8.INITIAL() || s8.status == s8.COMMITTED() || s8.status == s8.ABORTED();
    loop_invariant s9.status == s9.INITIAL() || s9.status == s9.COMMITTED() || s9.status == s9.ABORTED();
    loop_invariant s10.status == s10.INITIAL() || s10.status == s10.COMMITTED() || s10.status == s10.ABORTED();
    loop_invariant s11.status == s11.INITIAL() || s11.status == s11.COMMITTED() || s11.status == s11.ABORTED();
    loop_invariant s12.status == s12.INITIAL() || s12.status == s12.COMMITTED() || s12.status == s12.ABORTED();
    loop_invariant s13.status == s13.INITIAL() || s13.status == s13.COMMITTED() || s13.status == s13.ABORTED();
    loop_invariant s14.status == s14.INITIAL() || s14.status == s14.COMMITTED() || s14.status == s14.ABORTED();
    loop_invariant s15.status == s15.INITIAL() || s15.status == s15.COMMITTED() || s15.status == s15.ABORTED();
    loop_invariant s16.status == s16.INITIAL() || s16.status == s16.COMMITTED() || s16.status == s16.ABORTED();
    loop_invariant consistency();
    while (!c.flag &&
           s1.isUncommitted() &&
           s2.isUncommitted() &&
           s3.isUncommitted() &&
           s4.isUncommitted() &&
           s5.isUncommitted() &&
           s6.isUncommitted() &&
           s7.isUncommitted() &&
           s8.isUncommitted() &&
           s9.isUncommitted() &&
           s10.isUncommitted() &&
           s11.isUncommitted() &&
           s12.isUncommitted() &&
           s13.isUncommitted() &&
           s14.isUncommitted() &&
           s15.isUncommitted() &&
           s16.isUncommitted()) {
      s1.query = c.query.clone();
      s2.query = c.query.clone();
      s3.query = c.query.clone();
      s4.query = c.query.clone();
      s5.query = c.query.clone();
      s6.query = c.query.clone();
      s7.query = c.query.clone();
      s8.query = c.query.clone();
      s9.query = c.query.clone();
      s10.query = c.query.clone();
      s11.query = c.query.clone();
      s12.query = c.query.clone();
      s13.query = c.query.clone();
      s14.query = c.query.clone();
      s15.query = c.query.clone();
      s16.query = c.query.clone();
      s1.start();
      s2.start();
      s3.start();
      s4.start();
      s5.start();
      s6.start();
      s7.start();
      s8.start();
      s9.start();
      s10.start();
      s11.start();
      s12.start();
      s13.start();
      s14.start();
      s15.start();
      s16.start();
      c.flag1 = s1.flag;
      c.flag2 = s2.flag;
      c.flag3 = s3.flag;
      c.flag4 = s4.flag;
      c.flag5 = s5.flag;
      c.flag6 = s6.flag;
      c.flag7 = s7.flag;
      c.flag8 = s8.flag;
      c.flag9 = s9.flag;
      c.flag10 = s10.flag;
      c.flag11 = s11.flag;
      c.flag12 = s12.flag;
      c.flag13 = s13.flag;
      c.flag14 = s14.flag;
      c.flag15 = s15.flag;
      c.flag16 = s16.flag;
      c.checkFlags();
      s1.flag = c.flag;
      s2.flag = c.flag;
      s3.flag = c.flag;
      s4.flag = c.flag;
      s5.flag = c.flag;
      s6.flag = c.flag;
      s7.flag = c.flag;
      s8.flag = c.flag;
      s9.flag = c.flag;
      s10.flag = c.flag;
      s11.flag = c.flag;
      s12.flag = c.flag;
      s13.flag = c.flag;
      s14.flag = c.flag;
      s15.flag = c.flag;
      s16.flag = c.flag;
      if (c.flag && s1.flag && s2.flag && s3.flag && s4.flag && s5.flag && s6.flag && s7.flag && s8.flag && s9.flag && s10.flag && s11.flag && s12.flag && s13.flag && s14.flag && s15.flag && s16.flag) {
          s1.commit();
          s2.commit();
          s3.commit();
          s4.commit();
          s5.commit();
          s6.commit();
          s7.commit();
          s8.commit();
          s9.commit();
          s10.commit();
          s11.commit();
          s12.commit();
          s13.commit();
          s14.commit();
          s15.commit();
          s16.commit();
      } else {
          s1.abort();
          s2.abort();
          s3.abort();
          s4.abort();
          s5.abort();
          s6.abort();
          s7.abort();
          s8.abort();
          s9.abort();
          s10.abort();
          s11.abort();
          s12.abort();
          s13.abort();
          s14.abort();
          s15.abort();
          s16.abort();
      }
    }
  }
}
